@include "16bitJumper.wasm"

.data MyData : DATAMEM
0x05:   WORD        0x01
        WORD        0x02 
        WORD        0x03
        WORD        0x04
        WORD        0x05
        WORD        0x06
        WORD        0x07
        WORD        0x08
        WORD        0x09

.data MyRegisters : REGISTERS
@include "register_constants.wasm"

.code MyCode : REGSTACK, MyData, MyRegisters
LOADI   $arg1, 0x05    # address of start of vector
LOADI   $arg2, 0x09    # length of vector
JSR     SquareLength   # computes the square length of the vector
HALT

# ----------------------------
# sums the square value of each element of vector arg1 of length arg2
# val1 = SquareLength(arg1,arg2)
# ----------------------------
SquareLength:      
SUBI    $sp, $sp,4         # save to stack
SW      $ra, 3, $sp
SW      $s1, 2, $sp
SW      $s2, 1, $sp
SW      $s3, 0, $sp

COPY    $s1, $arg1         # s1: start address
ADD     $s2, $arg1, $arg2  # s2: end address
LOADI   $s3, 0             # set sum to zero at start

loop:
LW      $arg1, 0, $s1      		# read next element
ANDI    $tmp0, $arg1, 0x8000      	# mask arg1 with 'negative bit'
BEQ     $tmp0, $zero, positive    	# test if 'negative bit' is set
SUB     $arg1, $zero, $arg1       	# if so make arg1 positive

positive:
JSR     Square             # square value of arg1 to register val1
ADD     $s3, $s3, $val1    # add squared value to sum 
ADDI    $s1, $s1, 1        # next address
BNE     $s1, $s2, loop     # loop when not at end address
COPY    $val1, $s3         # return resulting sum via val1

LW      $ra, 3, $sp        # load from stack
LW      $s1, 2, $sp
LW      $s2, 1, $sp
LW      $s3, 0, $sp
ADDI    $sp, $sp, 4
RETURN  $ra

# ----------------------------
# returns the square of arg1 
# val1 = arg1*arg1
# ----------------------------
Square:
	LOADI	$val1, 0 		# int result = 0;
	BZ	$arg1, Square_end	# if (n != 0)
	
	SUBI	$sp, $sp, 5	# // Some stack bs
	SW	$ra, 0, $sp
	SW 	$arg1, 1, $sp	
	SW	$tmp1, 2, $sp
	SW	$tmp2, 3, $sp
	SW	$tmp3, 4, $sp

	LOADI	$tmp1, 42
	LOADI	$tmp2, 42

	SHRI 	$arg1, $arg1, 1	# int x = n >> 1; // arg1 because Square uses that
	COPY	$tmp1, $val1
	JSR	Square
	ADD	$val1, $val1, $tmp1
	SHLI 	$val1, $val1, 2	# result = (square(x) << 2);
	
	LW	$tmp3, 1, $sp	# should be prevN
	SHL	$tmp3, $tmp3, $tmp1

	ANDI 	$tmp2, $arg1, 1
	BNZ	$tmp2, Square_Two	# if (n&1) 

	# TODO: the val1 shit!

	LW	$ra, 0, $sp
	LW	$tmp1, 2, $sp
	LW	$tmp2, 3, $sp
	LW	$tmp3, 4, $sp	
	LW	$arg1, 1, $sp
	ADDI 	$sp, $sp, 5
	RETURN	$ra

Square_Two:
	ADD	$val1, $tmp3, $arg1	# result +=
	ADD	$val1, $val1, $tmp0

Square_end:
	RETURN	$ra
