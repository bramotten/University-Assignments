# multiplication of 1st and 2nd register and store result in 3th register
# thereby only looking at the first 8 bits of b
@include "PipelinedHarvard.wasm"

# naming some registers and setting initial values
.data MyRegisters  : REGISTERS
0x1: WORD a 14          # first  number to multiply
0x2: WORD b 49          # second number to multiply
0x3: WORD result 0      # should store a*b at the end of program
0x4: WORD bitLength 8   # number of bits
0x5: WORD currentBit 0  # current bit
0x6: WORD mask 1        # used for bit masking
0x7: WORD maskResult    # temporary result after masking b
0x8: WORD add           # temporary result after shifting a

.code MyCode  : HARVARD, MyRegisters
start:   	AND   maskResult, b,          mask        # mask to get bit 'currentBit' of 'b'
         	SHLI  mask,       mask,       1           # prepare 'mask' for next loop
	BZ    maskResult, skipAdd                 # check and skip addition when 'maskResult' is zero
         	SHL   add,        a,          currentBit  # otherwise left shift 'a' 'currentBit' times
	ADD   result,     result,     add         # and add it to result thus far
skipAdd: 	ADDI  currentBit, currentBit, 1           # move to next bit
	BNE   currentBit, bitLength,  start       # jump back to start when not finished
HALT
