for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
print(gamma_k)
print("SHIT")
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
for (k in 1:K) {
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
if (norm(theta - old_theta, type = "O") < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
print(pi_k_sums)
# M step
for (k in 1:K) {
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
if (norm(theta - old_theta, type = "O") < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
pi_k_sums_sum <- sum(pi_k_sums) # :D
for (k in 1:K) {
w[k] <- pi_k_sums[k] / pi_k_sums_sum
mu[k] <- sum(x) * pi_k_sums[k] / pi_k_sums_sum
sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
no <- norm(theta - old_theta, type = "O")
print(theta)
print(no)
if (no < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
pi_k_sums_sum <- sum(pi_k_sums) # :D
for (k in 1:K) {
w[k] <- pi_k_sums[k] / pi_k_sums_sum
mu[k] <- sum(x) * pi_k_sums[k] / pi_k_sums_sum
sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
no <- norm(theta - old_theta, type = "O")
if (no < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
pi_k_sums_sum <- sum(pi_k_sums) # :D
for (k in 1:K) {
dnorm(x, mu[k], sigma[k])
w[k] <- pi_k_sums[k] / pi_k_sums_sum
mu[k] <- sum(x * w[k] * p_x_k / sum_p_x) / pi_k_sums_sum
sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
no <- norm(theta - old_theta, type = "O")
if (no < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
pi_k_sums_sum <- sum(pi_k_sums) # :D
for (k in 1:K) {
dnorm(x, mu[k], sigma[k])
w[k] <- pi_k_sums[k] / pi_k_sums_sum
mu[k] <- sum(x * w[k] * p_x_k / sum_p_x) / pi_k_sums_sum
sigma[k] <- sqrt( sum((w[k] * p_x_k / sum_p_x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
# print(theta)
# print(norm(theta - old_theta, type = "O"))
no <- norm(theta - old_theta, type = "O")
if (no < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# Q / E step = E[log(f(x; theta))]
sum_p_x <- sum(w * dnorm(x, mu, sigma))
pi_k_sums <- numeric(K)
E <- 0
for (k in 1:K) {
p_x_k <- dnorm(x, mu[k], sigma[k])
gamma_k <- w[k] * p_x_k / sum_p_x
pi_k_sums[k] <- sum(gamma_k)
E <- E + gamma_k * (log(w[k]) + log(p_x_k))
}
# M step
pi_k_sums_sum <- sum(pi_k_sums) # :D
for (k in 1:K) {
w[k] <- pi_k_sums[k] / pi_k_sums_sum
mu[k] <- sum(x) * pi_k_sums[k] / pi_k_sums_sum
sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
}
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
print(theta)
# print(norm(theta - old_theta, type = "O"))
diff <- norm(theta - old_theta, type = "O")
if (diff < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# # Q / E step = E[log(f(x; theta))]
# sum_p_x <- sum(w * dnorm(x, mu, sigma))
# pi_k_sums <- numeric(K)
# E <- 0
# for (k in 1:K) {
#   p_x_k <- dnorm(x, mu[k], sigma[k])
#   gamma_k <- w[k] * p_x_k / sum_p_x
#   pi_k_sums[k] <- sum(gamma_k)
#   E <- E + gamma_k * (log(w[k]) + log(p_x_k))
# }
#
# # M step
# pi_k_sums_sum <- sum(pi_k_sums) # :D
# for (k in 1:K) {
#   w[k] <- pi_k_sums[k] / pi_k_sums_sum
#   mu[k] <- sum(x) * pi_k_sums[k] / pi_k_sums_sum
#   sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
# }
# Exp
p_matrix <- matrix(nrow = N, ncol = K)
for (i in 1:N) {
for (k in 1:K) {
p_matrix[i, k] <- w[k] * dnorm(x, mu[k], sigma[k])
}
}
p_matrix <- p_matrix / sum(w * dnorm(x, mu, sigma))
print(head(p_matrix))
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
print(theta)
# print(norm(theta - old_theta, type = "O"))
diff <- norm(theta - old_theta, type = "O")
if (diff < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
fit_em <- function(x, w, mu, sigma, approx) {
N <- length(x)
K <- length(w)
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
repeat {
old_theta <- theta  # not a reference but a copy
w <- theta[1:K, 1]
my <- theta[1:K, 2]
sigma <- theta[1:K, 3]
# ^ ugly
# # Q / E step = E[log(f(x; theta))]
# sum_p_x <- sum(w * dnorm(x, mu, sigma))
# pi_k_sums <- numeric(K)
# E <- 0
# for (k in 1:K) {
#   p_x_k <- dnorm(x, mu[k], sigma[k])
#   gamma_k <- w[k] * p_x_k / sum_p_x
#   pi_k_sums[k] <- sum(gamma_k)
#   E <- E + gamma_k * (log(w[k]) + log(p_x_k))
# }
#
# # M step
# pi_k_sums_sum <- sum(pi_k_sums) # :D
# for (k in 1:K) {
#   w[k] <- pi_k_sums[k] / pi_k_sums_sum
#   mu[k] <- sum(x) * pi_k_sums[k] / pi_k_sums_sum
#   sigma[k] <- sqrt( sum((x - mu[k])^2) * pi_k_sums[k] / pi_k_sums_sum )
# }
# Exp
p_matrix <- matrix(nrow = N, ncol = K)
for (i in 1:N) {
for (k in 1:K) {
p_matrix[i, k] <- w[k] * dnorm(x[i], mu[k], sigma[k])
}
}
p_matrix <- p_matrix / sum(w * dnorm(x, mu, sigma))
print(head(p_matrix))
# Break, TODO: which norm?
theta <- matrix(data = c(w, mu, sigma), nrow = 2, ncol = 3)
print(theta)
# print(norm(theta - old_theta, type = "O"))
diff <- norm(theta - old_theta, type = "O")
if (diff < approx) break
}
colnames(theta) <- c("w", "mu", "sigma")
theta
}
approx <- 0.01
rev(w)
fit_em(mixture_samples, rev(w), rev(mu), rev(sigma), approx)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(42)
plot(rnorm(10))
plot(rnorm(10))
setwd("C:/Users/Bram/Google Drive/MSc Statistics/Advanced Statistical Computing/Exam")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(42)
setwd("C:/Users/Bram/Google Drive/MSc Statistics/Advanced Statistical Computing/Exam")
library(readr)
insurance <- read_csv("insurance.csv")
library{readr}
library(readr)
data <- read_csv("insurance.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(42)
setwd("C:/Users/Bram/Google Drive/MSc Statistics/Advanced Statistical Computing/Exam")
library(readr)
data <- read_csv("insurance.csv")
head(data)
library(readr)
data <- read_csv("insurance.csv")
head(data)
library(readr)
data <- read_csv("insurance.csv");
head(data)
library(readr)
data <- read_csv("insurance.csv")
head(data)
library(readr)
data <- read_csv("insurance.csv")
head(data)
head(data)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(42)
setwd("C:/Users/Bram/Google Drive/MSc Statistics/Advanced Statistical Computing/Exam")
library(readr)
data <- read_csv("insurance.csv")
head(data)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(42)
setwd("C:/Users/Bram/Google Drive/MSc Statistics/Advanced Statistical Computing/Exam")
library(readr)
data <- read_csv("insurance.csv") # n = 648; columns: ID, PLI, WC
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- 1:500
plot(t, P(t))
?seq
t <- seq(100, 200, 10)
plot(t, P(t), type = "l")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
plot(t, P(t), type = "l")
lines(t, V(t, data$PLI, data$WC))
V(t, data$PLI, data$WC)
V(100, data$PLI, data$WC)
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
plot(t, P(t), type = "l")
lines(t, for (t.i in t) V(t.i, data$PLI, data$WC))
for (t.i in t) V(t.i, data$PLI, data$WC)
?sapply
sapply(t, V, data$PLI, data$WC)
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
plot(t, P(t), type = "l")
lines(t, sapply(t, V, data$PLI, data$WC))
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
plot(t, P(t), type = "l")
lines(t, sapply(t, V, data$PLI, data$WC), col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, .001)  # step size 10 in reality
plot(t, P(t), type = "l")
lines(t, sapply(t, V, data$PLI, data$WC), col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, .1)  # step size 10 in reality
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), type = "l")
lines(t, Vt, col = "red")
Vt
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), type = "l")
lines(t, Vt, col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t))
points(t, Vt, col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t))
points(t, Vt, pch = 19, col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), pch = 19)
points(t, Vt, col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), pch = 19)
points(t, Vt, col = "red")
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), pch = 19)
points(t, Vt, col = "red")
hist(x1)
hist(X1)
hist(data$PLI)
par(mfrow=c(1,3))
P <- function(t) 40000 * exp(-t / 7)
V <- function(t, x1, x2) mean((x1 + x2) * ((x1 + x2) > t))
t <- seq(100, 200, 10)
Vt <- sapply(t, V, data$PLI, data$WC)
plot(t, P(t), pch = 19)
points(t, Vt, col = "red")
hist(data$PLI, breaks = 100, prob = TRUE)
hist(data$WC, breaks = 100, prob = TRUE)
hist(data$WC, breaks = 100, prob = TRUE)
hist(data$WC, breaks = 50, prob = TRUE)
hist(data$WC, breaks = 50, prob = TRUE)
hist(data$WC, breaks = 50, prob = TRUE)
S <- seq(-.5, 0, by = 0.0001)
plot(S, exp(S))
exp(-.5)
tinytex::install_tinytex()
library(tinytex)
tinytex::uninstall_tinytex()
